__file__ = 'python知识'

"""
性能提升
1、创建一个对象管理类，减小内存中创建对象的消耗
2、使用位运算来代替乘除，提升运行效率（用if ((a & 1) == 0) 代替 if (a % 2 == 0)来判断a是不是偶数。）

"""

"""
可变对象与不可变对象：
可变对象：dict、list
不可变对象：string、int、float、tuple
当我们定义一个变量的是时候，比如：a = '123'，python解析器做了两件事：第一：在内存memory中创建对象'123'，第二在内存memory中创建对象a，然后把a指向'123'
在比如：
i=j=1
j+=1
这个时候i和j就是不等的了，i还是1，但是j是2了，开始ij都指向1，然后解析器重新生成一个对象2，再把j指过去了，此时i并没有变化，他们各自指向各自的对象
这时候对于函数的参数，我们必须要设定不可变参数，当我们设定可变参数的时候，函数会"记住"我们的操作，从而造成错误
def func(a = []): pass
在函数参数之间的传递，不是指传递，而是对象之间的传递。当我们把某个对象传递到一个函数的时候，如果该函数定义了可变对象来接收
在举个例子：
a=b='123'
id(a)和id(b)是相同的，对a进行字符串相加后,a的id变了，但是b的没有变，说明解析器是新创建了一个对象，使a重新指向这个对象，所以对于string来说，是不变对象，也就是看起来是变了，但实际的内存中是重新创建了一个对象
a=b=[1,2,3]
id(a)和id(b)是相同的，这个时候我们对a.append(4)，这个时候ab都是变为[1,2,3,4]，我们在通过id函数查看内存，我们会发现所有的内存都没有变化，这可变对象，即创建之后，在保留原对象的基础上，内容可变。

"""

if __name__ == '__main__':
    a = [1,2,3]
    b = [4,5,6]
    def func(a=[]):
        a.append(4)
        print(a)
    func(a)
    func(a)
    func(a)
    def func(b=None):
        b.append(4)
        print(b)
    func(b)
    func(b)
    func(b)